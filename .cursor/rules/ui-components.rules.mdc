---
description: Comprehensive UI component and styling guidelines for a Turborepo project using Shadcn UI, Radix UI, and Tailwind
globs: 
alwaysApply: false
---
# UI Components and Styling Guidelines

## Architecture Principles

- **Component Location**: 
  - Before implementing a component for a basic element, check if we can accomplish it with shadcn. If we do, then install the component
  - App-specific components should be in their respective app directories
  - Break complex views into smaller, reusable components

- **Component Organization**:
  - Group related components in directories with an index.ts barrel file
  - Include component tests alongside the component files

## UI Framework and Styling

- Use Shadcn UI components as the foundation with Tailwind CSS for styling
- Implement responsive design with Tailwind using a mobile-first approach
- Follow the project's design tokens for consistent spacing, colors, and typography

### Installing New Shadcn Components

```sh
npx shadcn@latest add <COMPONENT>
```

Example:

```sh
npx shadcn@latest add progress
```
### Image Optimization

- Always use `next/image` for optimal performance and responsive behavior:

```tsx
import Image from 'next/image';

<Image 
  src="/path/to/image.jpg" 
  alt="Descriptive alt text" 
  width={500} 
  height={300} 
  priority={isHeroImage}
  className="rounded-lg"
/>
```
## Loading and Error States

Use the `LoadingContent` component to handle loading and error states consistently:

```tsx
<Card>
  <LoadingContent 
    loading={isLoading} 
    error={error}
    loadingFallback={<Skeleton className="h-40 w-full" />}
    errorFallback={<ErrorDisplay message={error?.message} retry={() => mutate()} />}
  >
    {data && <MyComponent data={data} />}
  </LoadingContent>
</Card>
```
## Accessibility Best Practices

- Ensure all interactive elements have appropriate ARIA attributes
- Maintain proper heading hierarchy (h1, h2, h3, etc.)
- Use semantic HTML elements (`<button>`, `<nav>`, `<article>`, etc.)
- Ensure color contrast meets WCAG standards (minimum ratio of 4.5:1)
- Make all functionality available via keyboard

## Performance Considerations

- Implement virtualization for long lists using `react-virtualized` or `react-window`
- Lazy load components below the fold using `next/dynamic` or React's `Suspense` and `lazy`
- Optimize images with appropriate sizes and formats

## Testing Guidelines

- Test visual appearance with Storybook and implement visual regression tests

